- id: invalid_schema
  structure:
    schema.yaml: |
      !INVALID!
  args:
    --workdir: out
  exception: SystemExit(1)


- id: good_type
  structure:
    schema.yaml: |
      properties:
        a:
          type: number
  args:
    --a: '1.0'
    --workdir: out

- id: invalid_type
  structure:
    schema.yaml: |
      properties:
        a:
          type: INVALID
  args:
    --workdir: out
  exception: "ValueError('Invalid type: INVALID')"

- id: bad_type
  structure:
    schema.yaml: |
      properties:
        a:
          type: number
  args:
    --a: "INVALID"
    --workdir: out
  output:
    - "Invalid value for '--a': 'INVALID' is not a valid float."
  exception: SystemExit(2)

- id: bad_format
  structure:
    schema.yaml: |
      properties:
        a:
          type: string
          format: email
  args:
    --a: "INVALID"
    --workdir: out
  output:
    - "Invalid value for '--a': 'INVALID' is not a 'email'"
  exception: SystemExit(2)

- id: invalid_format
  structure:
    schema.yaml: |
      properties:
        a:
          type: string
          format: INVALID
  args:
    --workdir: out"
  exception: "ValueError('Invalid format: INVALID')"

- id: good_format
  structure:
    schema.yaml: |
      properties:
        a:
          type: string
          format: email
  args:
    --a: "VALID@test.com"
    --workdir: out

- id: bad_mapping
  structure:
    schema.yaml: |
      properties:
        a:
          type: mapping
  args:
    --a: "INVALID"
    --workdir: out
  output:
    - "Invalid value for '--a': Expected a comma separated mapping (a=b,x=y), got INVALID"
  exception: SystemExit(2)

- id: bad_item_type
  structure:
    schema.yaml: |
      properties:
        a:
          type: array
          items:
            type: number
  args:
    --a: !!python/tuple ["INVALID"]
    --workdir: out
  output:
  - "Invalid value for '--a': could not convert string to float: 'INVALID'"
  exception: SystemExit(2)

- id: invalid_item_type
  structure:
    schema.yaml: |
      properties:
        a:
          type: array
          items:
            type: INVALID
  args:
    --workdir: out
  exception: "ValueError('Invalid type: INVALID')"

- id: bad_size
  structure:
    schema.yaml: |
      properties:
        a:
          type: size
  args:
    --a: "INVALID"
    --workdir: out
  output:
    - "Invalid value for '--a': Failed to parse size! (input 'INVALID' was tokenized as ['INVALID'])"
  exception: SystemExit(2)

- &parse_config
  id: parse_config
  structure:
    modules:
      echo.py: |
        from cellophane import modules
        from typing import Mapping

        @modules.pre_hook()
        def echo_config(config, logger, **_):
            for key, value in config.items():
                if not isinstance(value, (list, Mapping)):
                  logger.info(f"{key=} {value=} ({type(value).__name__})")
                else:
                  logger.info(f"{key=} ({type(value).__name__})")
                if isinstance(value, list):
                  for i, v in enumerate(value):
                    logger.info(f"{key=} {i=} {v=} ({type(v).__name__})")
                if isinstance(value, Mapping):
                  for k, v in value.items():
                    logger.info(f"{key=} {k=} {v=} ({type(v).__name__})")
    schema.yaml: |
      properties:
        string:
          type: string
        override:
          type: string
        number:
          type: number
        number_range:
          type: number
          minimum: 0
          maximum: 10
        integer:
          type: integer
        integer_range:
          type: integer
          minimum: 0
          maximum: 10
        boolean:
          type: object
          properties:
            b:
              type: boolean
            a:
              type: boolean
        typed_array:
          type: array
          items:
            type: integer
        array:
          type: array
        mapping:
          type: mapping
        path:
          type: path
        size:
          type: size
        no_type:
          default: "DEFAULT"
    config.yaml: |
      string: "string"
      override: "CONFIG"
      number: 1.0
      integer: 1
      boolean:
        a: true
        b: false
      typed_array: [1, 3, 3, 7]
      array: [1, 3, 3, 7]
      mapping:
        a: "a"
        b: 1
        c: 1.0
        d:
          e: "e"
          f: 42
      path: "path/to/file"
      size: 1 GB
  args:
    --config_file: config.yaml
    --override: "CLI"
    --workdir: DUMMY
  logs:
  - key='string' value='string' (str)
  - key='override' value='CLI' (str)
  - key='number' value=1.0 (float)
  - key='integer' value=1 (int)
  - key='boolean' k='a' v=True (bool)
  - key='boolean' k='b' v=False (bool)
  - key='typed_array' (list)
  - key='typed_array' i=0 v=1 (int)
  - key='typed_array' i=1 v=3 (int)
  - key='typed_array' i=2 v=3 (int)
  - key='typed_array' i=3 v=7 (int)
  - key='array' (list)
  - key='array' i=0 v='1' (str)
  - key='array' i=1 v='3' (str)
  - key='array' i=2 v='3' (str)
  - key='array' i=3 v='7' (str)
  - key='mapping' (PreservedDict)
  - key='mapping' k='a' v='a' (str)
  - key='mapping' k='b' v=1 (int)
  - key='mapping' k='c' v=1.0 (float)
  - "key='mapping' k='d' v={'e': 'e', 'f': 42}"
  - key='path' value=PosixPath('path/to/file') (PosixPath)
  - key='size' value=1000000000 (int)
  - key='no_type' value='DEFAULT' (str)

- <<: *parse_config
  id: parse_flags
  args:
    --workdir: DUMMY
    --string: "string"
    --override: "CLI"
    --number: "1.0"
    --integer: "1"
    --boolean_a: ~
    --boolean_no_b: ~
    --typed_array: !!python/tuple [1, 3, 3, 7]
    --array: !!python/tuple [1, 3, 3, 7]
    --mapping: a="a",b=1,c=1.0,d.e="e",d.f=42
    --path: "path/to/file"
    --size: "1 GB"
